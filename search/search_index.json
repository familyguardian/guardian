{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guardian","text":"<p>WARNING: THIS SOFTWARE IS NOT READY FOR PRODUCTION OR REAL-WORLD USE!</p> <p>Guardian is under active development. It is experimental, incomplete, and may contain serious bugs or security issues. DO NOT use this software to protect children, enforce limits, or for any purpose where safety, privacy, or reliability matter. Use at your own risk. The maintainers do NOT recommend or support real-world deployment at this time.</p> <pre><code>Helping Families Build Healthy Media Habits\n</code></pre>"},{"location":"#what-is-guardian","title":"What is Guardian?","text":"<p>Guardian is a parental control system for Linux that helps families guide their children toward a healthy relationship with media, the internet, and especially video games. Guardian empowers parents to set reasonable boundaries, encourage positive habits, and foster open conversations about digital life.</p>"},{"location":"#why-use-guardian","title":"Why Use Guardian?","text":"<ul> <li>Support healthy routines: Set daily time limits and curfews for computer and gaming use, tailored to each child.</li> <li>Encourage balance: Help children learn to manage their screen time and prioritize school, sleep, and family activities.</li> <li>Cross-device protection: Guardian works across all family computers, laptops, and gaming devices, so limits are   enforced everywhere.</li> <li>Peace of mind: Automated enforcement means parents don\u2019t have to constantly monitor or argue about time spent online.</li> <li>Transparency: Children see friendly reminders and notifications, so expectations are clear and fair.</li> <li>Parent dashboard: Easily review usage, adjust limits, and grant bonus time when needed.</li> </ul>"},{"location":"#how-guardian-works","title":"How Guardian Works","text":"<p>Guardian is made up of several components that work together to provide robust, flexible, and family-friendly control:</p>"},{"location":"#device-service-guardian-daemon","title":"Device Service (guardian-daemon)","text":"<ul> <li>Runs quietly in the background on each device.</li> <li>Tracks logins and actual usage time for each child.</li> <li>Enforces daily quotas and curfews, blocking logins or ending sessions when limits are reached.</li> <li>Works even if the device is offline; syncs with the central server when reconnected.</li> </ul>"},{"location":"#friendly-reminders-guardian-agent","title":"Friendly Reminders (guardian-agent)","text":"<ul> <li>Shows notifications to children as they approach their limits.</li> <li>Encourages self-regulation and positive habits.</li> </ul>"},{"location":"#parent-dashboard-guardian-hub-not-yet-implemented","title":"Parent Dashboard (guardian-hub - not yet implemented)","text":"<ul> <li>Web-based and CLI tools for parents to view activity, adjust rules, and manage devices.</li> <li>See how much time each child has spent, across all devices.</li> <li>Grant bonus time or change limits instantly.</li> </ul>"},{"location":"#central-server-guardian-hub-not-yet-implemented","title":"Central Server (guardian-hub - not yet implemented)","text":"<ul> <li>Keeps track of all devices, users, and policies.</li> <li>Ensures rules are consistent and up-to-date everywhere.</li> <li>Provides secure authentication and audit logs for accountability.</li> </ul>"},{"location":"#example-setting-up-guardian-for-your-family","title":"Example: Setting Up Guardian for Your Family","text":"<ol> <li>Create a Linux account for each child.</li> <li>Install Guardian on all family devices.</li> <li>Set daily time limits and curfew hours for each child in the dashboard.</li> <li>Review usage reports and adjust rules as needed.</li> <li>Talk with your children about healthy media habits and why these boundaries matter.</li> </ol>"},{"location":"#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>Does Guardian block specific games or websites?</p> <p>Not yet, but app allowlists and blocklists are planned for future releases. For now, Guardian focuses on overall time and healthy routines.</p> <p>Can my child use their computer for homework after their gaming time is up?</p> <p>You can set different rules for weekdays, weekends, and bonus time. Guardian is flexible to fit your family\u2019s needs.</p> <p>What happens if the internet goes down?</p> <p>Guardian enforces rules locally on each device, so limits and curfews still apply even if the server is offline.</p> <p>Is my family\u2019s data safe?</p> <p>Guardian uses secure authentication and stores only what\u2019s needed for enforcement. Parents control all settings and data.</p>"},{"location":"#tips-for-parents","title":"Tips for Parents","text":"<ul> <li>Use Guardian as a tool for conversation, not just enforcement.</li> <li>Involve your children in setting limits and talk about why balance matters.</li> <li>Review usage together and celebrate positive habits.</li> <li>Adjust rules as your children grow and their needs change.</li> </ul>"},{"location":"#learn-more-get-started","title":"Learn More &amp; Get Started","text":"<p>Visit the Guardian website for installation guides, troubleshooting, and community support.</p> <p>For technical details, see the Developer Documentation.</p>"},{"location":"developer/","title":"Guardian Developer Guide","text":"<p>Welcome to the Guardian developer documentation! This guide explains how the project is developed, what is expected from contributors, and how you can get started contributing to Guardian.</p>"},{"location":"developer/#contribution-guidelines","title":"Contribution Guidelines","text":"<ul> <li>Code style: Follow PEP8 and use type hints where possible. All code should be well-documented with clear docstrings   in English.</li> <li>Pre-commit hooks: You must install lefthook to ensure code quality and formatting. See below for setup instructions.</li> <li>Tests: All new features and bugfixes should include relevant tests.</li> <li>Documentation: Update or add documentation for any new modules, features, or CLI commands.</li> <li>Pull requests: Make sure your branch is up to date with <code>main</code> and all checks pass before submitting a PR.</li> </ul>"},{"location":"developer/#project-setup-workflow","title":"Project Setup &amp; Workflow","text":"<p>Guardian uses uv for Python environment and dependency management. Each subproject has its own <code>pyproject.toml</code> and isolated virtualenv.</p>"},{"location":"developer/#basic-uv-commands","title":"Basic uv Commands","text":"<p>Create a virtual environment for a subproject:</p> <pre><code>cd guardian_daemon\nuv venv\n</code></pre> <p>Install dependencies:</p> <pre><code>uv pip install -r requirements.txt\n# or\nuv pip install .\n</code></pre> <p>Upgrade dependencies:</p> <pre><code>uv pip upgrade\n</code></pre> <p>Run scripts:</p> <pre><code>uv run main.py\n</code></pre>"},{"location":"developer/#lefthook-setup","title":"Lefthook Setup","text":"<p>Guardian uses lefthook for git pre-commit hooks (linting, formatting, etc.).</p> <p>Install lefthook hooks for your repo:</p> <pre><code>uv run lefthook install\n</code></pre> <p>This ensures all code is checked before commits and PRs.</p>"},{"location":"developer/#building-documentation-with-mkdocs","title":"Building Documentation with MkDocs","text":"<p>Guardian uses MkDocs for user and developer documentation.</p> <p>To build and serve the docs locally:</p> <pre><code>uv pip install mkdocs\nmkdocs serve\n</code></pre> <p>The documentation will be available at http://localhost:8000</p>"},{"location":"developer/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the repository and clone your fork.</li> <li>Create a new branch for your feature or fix.</li> <li>Set up your environment with uv and lefthook as described above.</li> <li>Make your changes, add tests and documentation.</li> <li>Run all checks and make sure everything passes.</li> <li>Submit a pull request with a clear description of your changes.</li> </ol>"},{"location":"developer/#community-support","title":"Community &amp; Support","text":"<p>If you have questions or want to discuss ideas, open an issue or join our community chat (see the main README for links).</p> <p>Thank you for helping make Guardian better for families everywhere!</p>"},{"location":"developer/curfew_implementation/","title":"Curfew Implementation Details","text":"<p>The curfew feature is implemented using the <code>pam_time.so</code> module, which enforces time-based access restrictions for user accounts. The rules are defined in <code>/etc/security/time.conf</code>.</p>"},{"location":"developer/curfew_implementation/#rule-generation","title":"Rule Generation","text":"<p>The <code>guardian-daemon</code> generates two main types of rules:</p> <ol> <li>Default Allow Rule: A rule is created to explicitly allow all users who are not in the <code>kids</code>    group to log in at any time. This is a critical safety measure to prevent administrators or other    non-managed users from being locked out.</li> </ol> <pre><code>*;*;!@kids;Al0000-2400\n</code></pre> <ol> <li>Managed User Curfew Rules: For each managed user, a specific rule is created that defines the    allowed login times. This rule uses wildcards (<code>*</code>) for the service and TTY fields, meaning it    applies to all forms of login for that user.</li> </ol> <pre><code>*;*;kid1;Wk0800-2000&amp;Sa0900-2200\n</code></pre>"},{"location":"developer/curfew_implementation/#important-note-for-administrators","title":"Important Note for Administrators","text":"<p>The use of a wildcard for the service field (<code>*</code>) means that the curfew is strictly enforced for the managed user's account under all circumstances. This includes attempts by an administrator (like a parent) to use <code>su</code> or <code>sudo</code> to switch to the user's account.</p> <p>Example:</p> <p>If <code>kid1</code> has a curfew and a parent tries to run <code>sudo -u kid1 bash</code> outside the allowed hours, the action will be denied by PAM.</p> <p>This is intentional behavior to ensure the curfew cannot be bypassed. If an administrator needs to perform actions as the user during a restricted period, they will need to temporarily adjust the user's policy to extend the curfew.</p>"},{"location":"developer/daemon_implementation_notes/","title":"Guardian Daemon (guardian-daemon)","text":""},{"location":"developer/daemon_implementation_notes/#design-decisions","title":"Design Decisions","text":"<ul> <li>Explicit User Monitoring: Only users listed under <code>users:</code> in the configuration are monitored.   Parents/admins/system accounts are excluded.</li> <li>Config Reload: The configuration is reloaded every 5 minutes. Changes are automatically detected and lead to an   update of systemd timers and PAM rules.</li> <li>Dynamic Adjustment: Timers and login rules are immediately adjusted when policies change, without restarting the daemon.</li> <li>Timer Catch-Up: If the computer is not running at the reset time, the daily reset is performed at the next startup.</li> <li>Quota Calculation: Daily quota is calculated from a configurable reset time, not from midnight. Running sessions   are included.</li> <li>Basic global parameters:<ul> <li>hub_address: Address of the Guardian Hub (empty = disabled)</li> </ul> </li> <li>db_path: Path to the SQLite database (default: /var/lib/guardian/guardian.sqlite)</li> <li>ipc_socket: Path to the IPC socket (default: /run/guardian-daemon.sock)</li> <li>Global configuration for quota warnings and grace period:<ul> <li>notifications: Configured at the top level and applies system-wide</li> <li>pre_quota_minutes: List of minutes before quota end for warnings (e.g. [15, 10, 5])</li> <li>grace_period.enabled: Enables the grace period</li> <li>grace_period.duration: Duration of the grace period in minutes</li> <li>grace_period.interval: Notification interval in minutes during the grace period</li> <li>defaults: Reserved for user-specific default values (e.g. daily_quota_minutes, curfew, grace_minutes)</li> </ul> </li> </ul>"},{"location":"developer/daemon_implementation_notes/#overview","title":"Overview","text":"<p><code>guardian-daemon</code> is the system-wide background service of the Guardian system for enforcing time quotas and curfews for children on Linux devices. It runs as a systemd service with root privileges and is modular.</p>"},{"location":"developer/daemon_implementation_notes/#current-components","title":"Current Components","text":"<ul> <li>Quota Calculation</li> <li>Sums all sessions of a day since the last reset time and checks against the daily quota.</li> <li> <p>Takes grace period and running sessions into account.</p> </li> <li> <p>Dynamic PAM Rules</p> </li> <li> <p>Rules apply explicitly only to users listed in the configuration (children).</p> </li> <li> <p>Systemd Timer Management</p> </li> <li>Daily reset and curfew are automated via systemd timers/units.</li> <li> <p>Timers are updated on policy change and caught up at startup if missed.</p> </li> <li> <p>Error Logging</p> </li> <li> <p>All key actions and errors are logged to the systemd journal.</p> </li> <li> <p>Policy Loader (<code>policy.py</code>)</p> </li> <li>Loads the configuration from a YAML file (path via ENV <code>GUARDIAN_DAEMON_CONFIG</code> or fallback to <code>config.yaml</code>).</li> <li> <p>Provides methods for accessing user and default policies.</p> </li> <li> <p>Storage (<code>storage.py</code>)</p> </li> <li>Central SQLite interface for sessions and future extensions.</li> <li> <p>Enables saving and querying session data.</p> </li> <li> <p>SessionTracker (<code>sessions.py</code>)</p> </li> <li>Monitors logins/logouts via systemd-logind (DBus, with <code>dbus-next</code>).</li> <li>Measures usage time per child and saves it in the database.</li> <li> <p>Checks quota/curfew according to the policy.</p> </li> <li> <p>PamManager (<code>pam_manager.py</code>)</p> </li> <li>Writes and removes login time rules in <code>/etc/security/time.conf</code> according to the policy.</li> <li> <p>Backup of the original file is created automatically.</p> </li> <li> <p>Integration (<code>main.py</code>)</p> </li> <li>Initializes all components and starts the daemon.</li> <li>Policy and storage are passed centrally.</li> <li>PAM rules are set at startup.</li> <li>Session tracking runs asynchronously.</li> </ul>"},{"location":"developer/daemon_implementation_notes/#remaining-steps-todos","title":"Remaining Steps &amp; TODOs","text":"<ul> <li>Enforcement Logic</li> <li>Define notification frequency and thresholds (guardian_agent).</li> <li>Implement session termination more specifically if necessary (e.g. only graphical sessions, game sessions).</li> <li> <p>Develop concept for game sessions and their enforcement/notification.</p> </li> <li> <p>Network Client</p> </li> <li>Communication with central Guardian Hub (API/WebSocket).</li> <li>Synchronization of policies and usage data.</li> <li> <p>File: <code>net_client.py</code></p> </li> <li> <p>Admin IPC</p> </li> <li>Implement a local socket for admin commands (bonus time, policy reload, etc.).</li> <li> <p>File: <code>ipc.py</code></p> </li> <li> <p>Error and Exception Handling</p> </li> <li> <p>Logging with as much detail as possible, possibly message to the hub.</p> </li> <li> <p>Tests and Mocking</p> </li> <li>Write unit and integration tests for all core modules.</li> <li>Mock DBus and systemd for local tests.</li> </ul>"},{"location":"developer/daemon_implementation_notes/#roadmap-phases","title":"Roadmap / Phases","text":""},{"location":"developer/daemon_implementation_notes/#phase-0-local-per-device","title":"Phase 0 \u2014 Local (per device)","text":"<ul> <li>Daemon (systemd), policy loader, PAM time windows, logind watcher, timer for curfew/reset.</li> <li>guardianctl (CLI).</li> </ul>"},{"location":"developer/daemon_implementation_notes/#phase-1-hub-mvp","title":"Phase 1 \u2014 Hub (MVP)","text":"<ul> <li>Server with policies, usage, sessions, API.</li> <li>Device enrollment, policy pull, heartbeats.</li> <li>Daily reset server-side.</li> </ul>"},{"location":"developer/daemon_implementation_notes/#phase-2-multi-device-push","title":"Phase 2 \u2014 Multi-Device &amp; Push","text":"<ul> <li>WebSocket push: immediate termination on all devices.</li> <li>Conflict resolution + offline deltas.</li> <li>Parent dashboard with live status.</li> </ul>"},{"location":"developer/daemon_implementation_notes/#phase-3-comfort-hardening","title":"Phase 3 \u2014 Comfort &amp; Hardening","text":"<ul> <li>Roles/multiple parents, 2FA, notifications (mail/signal/matrix).</li> <li>Allowlist/blocklist for apps.</li> <li>Kiosk mode units per child.</li> </ul>"},{"location":"developer/daemon_implementation_notes/#systemd-integration-generated-by-the-daemon","title":"Systemd Integration (generated by the daemon)","text":"<ul> <li>guardian.service (root daemon)</li> <li>guardian.socket (admin IPC, group <code>guardian-admin</code>)</li> <li>curfew@.service / timer (logout per child at fixed times)</li> <li>daily-reset.service / timer (reset quotas at configurable time, e.g. 03:00)</li> <li>gamesession@.service (optional: kiosk mode for Steam/Gamescope)</li> <li> <p>PAM-managed block in <code>/etc/security/time.conf</code></p> </li> <li> <p>Explicit User Monitoring:</p> </li> <li>Only users listed under <code>users:</code> in the configuration are monitored by the daemon and receive quota/curfew rules.</li> <li>An empty object (e.g. <code>kid2: {}</code>) means that defaults apply for this user.</li> <li>All other users (e.g. parents, admins, system accounts) are ignored and exempt from the rules.</li> <li> <p>This logic must be considered in all future components (enforcement, PAM, systemd, network).</p> </li> <li> <p>Modularity: Keep interfaces between components clear and simple. Policy and storage should be used as central services.</p> </li> <li>Configurability: Allow setting paths and options via ENV variables and systemd unit files.</li> <li>Security: Ensure secure permissions for IPC and database access. Backup and restore of PAM configurations.</li> <li>Fault Tolerance: Never hard lock out users due to errors in policy or database, but issue warnings and continue permissively.</li> <li> <p>Documentation: Keep the README and docstrings up to date to facilitate development for further contributors.</p> </li> <li> <p>Open Questions:</p> </li> <li>How are notifications technically triggered (guardian_agent)? DBus, socket, command?</li> <li>How are systemd timers caught up if the computer is not running at the reset time?</li> <li>How are game sessions and their enforcement/notification technically implemented?</li> <li> <p>How flexible and dynamic should PAM rules be adjusted?</p> </li> <li> <p>Explicit User Monitoring:</p> </li> <li>Only users listed under <code>users:</code> in the configuration are monitored by the daemon and receive quota/curfew rules.</li> <li>An empty object (e.g. <code>kid2: {}</code>) means that defaults apply for this user.</li> <li>All other users (e.g. parents, admins, system accounts) are ignored and exempt from the rules.</li> <li> <p>This logic must be considered in all future components (enforcement, PAM, systemd, network).</p> </li> <li> <p>Modularity: Keep interfaces between components clear and simple. Policy and storage should be used as central services.</p> </li> <li>Configurability: Allow setting paths and options via ENV variables and systemd unit files.</li> <li>Security: Ensure secure permissions for IPC and database access. Backup and restore of PAM configurations.</li> <li>Fault Tolerance: Never hard lock out users due to errors in policy or database, but issue warnings and continue permissively.</li> <li>Documentation: Keep the README and docstrings up to date to facilitate development for further contributors.</li> </ul> <p>For questions about the architecture or implementation, see the main README in the project root.</p>"},{"location":"developer/dependency_workflow/","title":"Dependency Management Workflow","text":"<p>This document outlines the process for adding, updating, or removing dependencies in Guardian projects.</p>"},{"location":"developer/dependency_workflow/#overview","title":"Overview","text":"<p>Guardian uses UV for Python package management and dependency resolution. We use lock files (<code>uv.lock</code>) to ensure deterministic builds and consistent deployments.</p>"},{"location":"developer/dependency_workflow/#adding-or-updating-dependencies","title":"Adding or Updating Dependencies","text":"<p>When adding or modifying dependencies in any of the Guardian components:</p> <ol> <li>Update the <code>pyproject.toml</code> file of the relevant component with the new/updated dependency.</li> </ol> <pre><code> cd path/to/guardian_project_root/component/\n uv add new-package\n</code></pre> <ol> <li>Run <code>uv sync</code> in the project root directory to update the lock file:</li> </ol> <pre><code>cd path/to/guardian_project_root/\nuv sync --all-packages --all-groups\n</code></pre> <ol> <li>Make sure to explicitly add the updated lock file to Git:</li> </ol> <pre><code>git add path/to/guardian_project_root/component/uv.lock\n</code></pre> <ol> <li>Commit and push your changes with a descriptive message:</li> </ol> <pre><code>git commit -m \"feat: add new-package dependency for feature X\"\ngit push\n</code></pre> <ol> <li>Deploy using the deploy_and_test.sh script:</li> </ol> <pre><code>./scripts/deploy_and_test.sh\n</code></pre>"},{"location":"developer/dependency_workflow/#important-notes","title":"Important Notes","text":"<ul> <li>Always commit the lock file: The <code>uv.lock</code> file ensures that the exact same package versions are used in all environments.</li> <li>Use <code>--frozen</code> in production: Our deployment scripts use the <code>--frozen</code> flag to install dependencies   exactly as specified in the lock file.</li> <li>Testing locally: When developing, you can use <code>uv run</code> without the <code>--frozen</code> flag for flexibility,   but always test with <code>--frozen</code> before deploying.</li> </ul>"},{"location":"developer/dependency_workflow/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with dependencies not being available:</p> <ol> <li>Verify that the dependency is correctly added to <code>pyproject.toml</code></li> <li>Check that you've run <code>uv sync</code> and committed the updated lock file</li> <li>If the dependency is still not found, try running without the <code>--frozen</code> flag for debugging</li> </ol>"},{"location":"home/quickstart/","title":"Quickstart","text":"<p>Welcome to Guardian! Follow these steps to get started:</p>"},{"location":"home/quickstart/#1-installation","title":"1. Installation","text":"<p>Todo: Explain installation steps here.</p>"},{"location":"home/quickstart/#2-basic-usage","title":"2. Basic Usage","text":"<p>Todo: Add basic usage instructions here.</p>"},{"location":"home/quickstart/#3-next-steps","title":"3. Next Steps","text":"<ul> <li>Explore Documentation</li> </ul> <p>TODO: </p> <ul> <li>Add more usage examples  </li> <li>Document configuration options  </li> <li>Link to troubleshooting guide  </li> </ul>"},{"location":"reference/agent/","title":"Guardian Agent","text":""},{"location":"reference/agent/#guardian_agent","title":"guardian_agent","text":"<p>Modules:</p> <ul> <li> <code>lock_events</code>           \u2013            <p>Guardian Agent: Tracks KDE screen lock/unlock events and sends them to the daemon via D-Bus IPC.</p> </li> <li> <code>logging</code>           \u2013            <p>Guardian logging setup module.</p> </li> </ul>"},{"location":"reference/agent/#guardian_agent.lock_events","title":"lock_events","text":"<p>Guardian Agent: Tracks KDE screen lock/unlock events and sends them to the daemon via D-Bus IPC.</p> <p>Classes:</p> <ul> <li> <code>LockEventReporter</code>           \u2013            </li> </ul>"},{"location":"reference/agent/#guardian_agent.lock_events.LockEventReporter","title":"LockEventReporter","text":"<pre><code>LockEventReporter(\n    session_id, username, system_bus, session_bus\n)\n</code></pre> <p>Methods:</p> <ul> <li> <code>listen_kde_locks</code>             \u2013              <p>Listen for KDE lock/unlock events via DBus and send to daemon.</p> </li> <li> <code>send_lock_event</code>             \u2013              <p>Send lock/unlock event to daemon via D-Bus IPC, with deduplication.</p> </li> </ul>"},{"location":"reference/agent/#guardian_agent.lock_events.LockEventReporter.listen_kde_locks","title":"listen_kde_locks  <code>async</code>","text":"<pre><code>listen_kde_locks()\n</code></pre> <p>Listen for KDE lock/unlock events via DBus and send to daemon.</p>"},{"location":"reference/agent/#guardian_agent.lock_events.LockEventReporter.send_lock_event","title":"send_lock_event  <code>async</code>","text":"<pre><code>send_lock_event(locked: bool)\n</code></pre> <p>Send lock/unlock event to daemon via D-Bus IPC, with deduplication. Ignores systemd-user sessions.</p>"},{"location":"reference/agent/#guardian_agent.logging","title":"logging","text":"<p>Guardian logging setup module. Configures log level, format, and target based on config.yaml/default-config.yaml.</p> <p>Functions:</p> <ul> <li> <code>load_logging_config</code>             \u2013              <p>Loads logging configuration from config.yaml or default-config.yaml.</p> </li> <li> <code>setup_logging</code>             \u2013              <p>Sets up structlog and stdlib logging according to config.</p> </li> </ul>"},{"location":"reference/agent/#guardian_agent.logging.load_logging_config","title":"load_logging_config","text":"<pre><code>load_logging_config()\n</code></pre> <p>Loads logging configuration from config.yaml or default-config.yaml. Returns dict with level, format, target from the 'logging' section.</p>"},{"location":"reference/agent/#guardian_agent.logging.setup_logging","title":"setup_logging","text":"<pre><code>setup_logging()\n</code></pre> <p>Sets up structlog and stdlib logging according to config.</p>"},{"location":"reference/ctl/","title":"Guardian CLI Tool","text":""},{"location":"reference/ctl/#guardianctl","title":"guardianctl","text":"<p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            <p>CLI-Tool f\u00fcr guardianctl (Typer).</p> </li> </ul>"},{"location":"reference/ctl/#guardianctl.cli","title":"cli","text":"<p>CLI-Tool f\u00fcr guardianctl (Typer).</p> <p>Functions:</p> <ul> <li> <code>create_command</code>             \u2013              <p>Dynamically create and register a command with the Typer app instance.</p> </li> <li> <code>format_command_output</code>             \u2013              <p>Format command output in a user-friendly way based on the command type.</p> </li> <li> <code>get_available_commands</code>             \u2013              <p>Query the daemon for available commands and their descriptions.</p> </li> <li> <code>ipc_call</code>             \u2013              <p>Send an IPC command to the daemon and return the response.</p> </li> <li> <code>register_diagnostic_commands</code>             \u2013              <p>Register diagnostic commands for when we can't connect to the daemon.</p> </li> <li> <code>register_dynamic_commands</code>             \u2013              <p>Register commands dynamically based on what the IPC server supports.</p> </li> </ul>"},{"location":"reference/ctl/#guardianctl.cli.create_command","title":"create_command","text":"<pre><code>create_command(\n    app_instance, cli_name, ipc_name, description, params\n)\n</code></pre> <p>Dynamically create and register a command with the Typer app instance.</p>"},{"location":"reference/ctl/#guardianctl.cli.format_command_output","title":"format_command_output","text":"<pre><code>format_command_output(command, data, param=None)\n</code></pre> <p>Format command output in a user-friendly way based on the command type.</p> <p>Parameters:</p>"},{"location":"reference/ctl/#guardianctl.cli.format_command_output(command)","title":"<code>command</code>","text":"(<code>str</code>)           \u2013            <p>The IPC command name</p>"},{"location":"reference/ctl/#guardianctl.cli.format_command_output(data)","title":"<code>data</code>","text":"(<code>dict</code>)           \u2013            <p>The parsed JSON response data</p>"},{"location":"reference/ctl/#guardianctl.cli.format_command_output(param)","title":"<code>param</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The parameter passed to the command (if any)</p>"},{"location":"reference/ctl/#guardianctl.cli.get_available_commands","title":"get_available_commands","text":"<pre><code>get_available_commands() -&gt; Dict\n</code></pre> <p>Query the daemon for available commands and their descriptions.</p>"},{"location":"reference/ctl/#guardianctl.cli.ipc_call","title":"ipc_call","text":"<pre><code>ipc_call(command, arg=None)\n</code></pre> <p>Send an IPC command to the daemon and return the response.</p>"},{"location":"reference/ctl/#guardianctl.cli.register_diagnostic_commands","title":"register_diagnostic_commands","text":"<pre><code>register_diagnostic_commands()\n</code></pre> <p>Register diagnostic commands for when we can't connect to the daemon. These commands help diagnose and troubleshoot issues with the daemon connection.</p>"},{"location":"reference/ctl/#guardianctl.cli.register_dynamic_commands","title":"register_dynamic_commands","text":"<pre><code>register_dynamic_commands()\n</code></pre> <p>Register commands dynamically based on what the IPC server supports.</p>"},{"location":"reference/daemon/","title":"Guardian Daemon","text":""},{"location":"reference/daemon/#guardian_daemon","title":"guardian_daemon","text":"<p>Modules:</p> <ul> <li> <code>config</code>           \u2013            <p>Configuration management for the Guardian Daemon.</p> </li> <li> <code>enforcer</code>           \u2013            <p>Enforcement module for guardian-daemon.</p> </li> <li> <code>ipc</code>           \u2013            <p>IPC server for admin commands of the Guardian Daemon.</p> </li> <li> <code>logging</code>           \u2013            <p>Guardian logging setup module.</p> </li> <li> <code>policy</code>           \u2013            <p>Policy loader for guardian-daemon.</p> </li> <li> <code>sessions</code>           \u2013            <p>Session tracking for guardian-daemon.</p> </li> <li> <code>storage</code>           \u2013            <p>Central SQLite interface for guardian-daemon.</p> </li> <li> <code>systemd_manager</code>           \u2013            <p>Systemd manager for guardian-daemon.</p> </li> <li> <code>user_manager</code>           \u2013            <p>User manager for guardian-daemon.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.config","title":"config","text":"<p>Configuration management for the Guardian Daemon.</p> <p>Classes:</p> <ul> <li> <code>Config</code>           \u2013            <p>Handles loading, merging, and validating the daemon's configuration.</p> </li> <li> <code>ConfigError</code>           \u2013            <p>Custom exception for configuration errors.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.config.Config","title":"Config","text":"<pre><code>Config(config_path=None)\n</code></pre> <p>Handles loading, merging, and validating the daemon's configuration.</p> <p>Methods:</p> <ul> <li> <code>get</code>             \u2013              <p>Gets a configuration value.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.config.Config.get","title":"get","text":"<pre><code>get(key, default=None)\n</code></pre> <p>Gets a configuration value.</p>"},{"location":"reference/daemon/#guardian_daemon.config.ConfigError","title":"ConfigError","text":"<p>               Bases: <code>Exception</code></p> <p>Custom exception for configuration errors.</p>"},{"location":"reference/daemon/#guardian_daemon.enforcer","title":"enforcer","text":"<p>Enforcement module for guardian-daemon. Checks quota and curfew, enforces limits by terminating sessions and blocking logins.</p> <p>Classes:</p> <ul> <li> <code>Enforcer</code>           \u2013            <p>Enforcement logic for quota and curfew. Handles session termination and user notifications.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.enforcer.Enforcer","title":"Enforcer","text":"<pre><code>Enforcer(policy: Policy, tracker: SessionTracker)\n</code></pre> <p>Enforcement logic for quota and curfew. Handles session termination and user notifications.</p> <p>Methods:</p> <ul> <li> <code>enforce_user</code>             \u2013              <p>Checks quota and curfew for a user and enforces actions if necessary.</p> </li> <li> <code>handle_grace_period</code>             \u2013              <p>Handles the grace period by notifying the user every minute until time is up.</p> </li> <li> <code>notify_user</code>             \u2013              <p>Sends a desktop notification to all matching agents of the given user (via D-Bus).</p> </li> <li> <code>terminate_session</code>             \u2013              <p>Terminates all running desktop sessions of the user (via systemd loginctl).</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.enforcer.Enforcer.enforce_user","title":"enforce_user  <code>async</code>","text":"<pre><code>enforce_user(username)\n</code></pre> <p>Checks quota and curfew for a user and enforces actions if necessary.</p>"},{"location":"reference/daemon/#guardian_daemon.enforcer.Enforcer.handle_grace_period","title":"handle_grace_period  <code>async</code>","text":"<pre><code>handle_grace_period(username)\n</code></pre> <p>Handles the grace period by notifying the user every minute until time is up.</p>"},{"location":"reference/daemon/#guardian_daemon.enforcer.Enforcer.notify_user","title":"notify_user  <code>async</code>","text":"<pre><code>notify_user(username, message, category='info')\n</code></pre> <p>Sends a desktop notification to all matching agents of the given user (via D-Bus). Implements a debounce mechanism to avoid sending too many similar notifications.</p>"},{"location":"reference/daemon/#guardian_daemon.enforcer.Enforcer.terminate_session","title":"terminate_session  <code>async</code>","text":"<pre><code>terminate_session(username)\n</code></pre> <p>Terminates all running desktop sessions of the user (via systemd loginctl). Only sessions with a desktop environment (not systemd-user/service) are targeted.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc","title":"ipc","text":"<p>IPC server for admin commands of the Guardian Daemon.</p> <p>Classes:</p> <ul> <li> <code>GuardianIPCServer</code>           \u2013            <p>IPC server for admin commands of the Guardian Daemon.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer","title":"GuardianIPCServer","text":"<pre><code>GuardianIPCServer(\n    config, tracker: SessionTracker, policy: Policy\n)\n</code></pre> <p>IPC server for admin commands of the Guardian Daemon. Provides a socket interface for status and control commands.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>close</code>             \u2013              <p>Closes the IPC socket and removes the socket file.</p> </li> <li> <code>handle_add_user</code>             \u2013              <p>Add a new user to the database with default settings.</p> </li> <li> <code>handle_connection</code>             \u2013              <p>Handles an incoming client connection.</p> </li> <li> <code>handle_describe_commands</code>             \u2013              <p>Returns a description of all available IPC commands and their parameters as JSON.</p> </li> <li> <code>handle_get_curfew</code>             \u2013              <p>Returns the current curfew times of a kid.</p> </li> <li> <code>handle_get_quota</code>             \u2013              <p>Returns the current quota status of a kid.</p> </li> <li> <code>handle_list_kids</code>             \u2013              <p>Returns the list of all kids (users).</p> </li> <li> <code>handle_list_timers</code>             \u2013              <p>Lists all active Guardian timers.</p> </li> <li> <code>handle_reload_timers</code>             \u2013              <p>Reloads the timer configuration.</p> </li> <li> <code>handle_reset_quota</code>             \u2013              <p>Resets the daily quota for all users (deletes sessions since last reset).</p> </li> <li> <code>handle_setup_user</code>             \u2013              <p>Sets up a user with Guardian (adds to groups, creates systemd services, etc).</p> </li> <li> <code>handle_sync_users_from_config</code>             \u2013              <p>Reset user settings in the database to match the configuration file.</p> </li> <li> <code>handle_update_user</code>             \u2013              <p>Update a specific setting for a user.</p> </li> <li> <code>start</code>             \u2013              <p>Starts the IPC server.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>Configuration data</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer(tracker)","title":"<code>tracker</code>","text":"(<code>SessionTracker</code>)           \u2013            <p>The main session tracker instance.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer(policy)","title":"<code>policy</code>","text":"(<code>Policy</code>)           \u2013            <p>The main policy instance.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the IPC socket and removes the socket file.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_add_user","title":"handle_add_user","text":"<pre><code>handle_add_user(username)\n</code></pre> <p>Add a new user to the database with default settings.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_add_user(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username to add</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_connection","title":"handle_connection  <code>async</code>","text":"<pre><code>handle_connection(reader, writer)\n</code></pre> <p>Handles an incoming client connection.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_describe_commands","title":"handle_describe_commands","text":"<pre><code>handle_describe_commands(_)\n</code></pre> <p>Returns a description of all available IPC commands and their parameters as JSON. This is used by the CLI for automatic command discovery.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_get_curfew","title":"handle_get_curfew","text":"<pre><code>handle_get_curfew(kid)\n</code></pre> <p>Returns the current curfew times of a kid.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_get_curfew(kid)","title":"<code>kid</code>","text":"(<code>str</code>)           \u2013            <p>Username</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_get_quota","title":"handle_get_quota  <code>async</code>","text":"<pre><code>handle_get_quota(kid)\n</code></pre> <p>Returns the current quota status of a kid. All time values are in minutes in the returned JSON.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>JSON string with quota information (used, limit, remaining in minutes)</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_get_quota(kid)","title":"<code>kid</code>","text":"(<code>str</code>)           \u2013            <p>Username</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_list_kids","title":"handle_list_kids","text":"<pre><code>handle_list_kids(_)\n</code></pre> <p>Returns the list of all kids (users).</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_list_timers","title":"handle_list_timers","text":"<pre><code>handle_list_timers(_)\n</code></pre> <p>Lists all active Guardian timers.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_reload_timers","title":"handle_reload_timers","text":"<pre><code>handle_reload_timers(_)\n</code></pre> <p>Reloads the timer configuration.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_reset_quota","title":"handle_reset_quota  <code>async</code>","text":"<pre><code>handle_reset_quota(_)\n</code></pre> <p>Resets the daily quota for all users (deletes sessions since last reset).</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_setup_user","title":"handle_setup_user","text":"<pre><code>handle_setup_user(username)\n</code></pre> <p>Sets up a user with Guardian (adds to groups, creates systemd services, etc).</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_setup_user(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username of the user to set up</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_sync_users_from_config","title":"handle_sync_users_from_config","text":"<pre><code>handle_sync_users_from_config(_)\n</code></pre> <p>Reset user settings in the database to match the configuration file. This also imports new users from the config to the database.</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_update_user","title":"handle_update_user","text":"<pre><code>handle_update_user(args)\n</code></pre> <p>Update a specific setting for a user.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.handle_update_user(args)","title":"<code>args</code>","text":"(<code>str</code>)           \u2013            <p>Format should be \"username setting_key setting_value\"</p>"},{"location":"reference/daemon/#guardian_daemon.ipc.GuardianIPCServer.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> <p>Starts the IPC server.</p>"},{"location":"reference/daemon/#guardian_daemon.logging","title":"logging","text":"<p>Guardian logging setup module. Configures log level, format, and target based on the application config.</p> <p>Functions:</p> <ul> <li> <code>get_logger</code>             \u2013              <p>Returns a configured structlog logger instance.</p> </li> <li> <code>setup_logging</code>             \u2013              <p>Sets up structlog and stdlib logging according to the provided config.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.logging.get_logger","title":"get_logger","text":"<pre><code>get_logger(name)\n</code></pre> <p>Returns a configured structlog logger instance.</p>"},{"location":"reference/daemon/#guardian_daemon.logging.setup_logging","title":"setup_logging","text":"<pre><code>setup_logging(config)\n</code></pre> <p>Sets up structlog and stdlib logging according to the provided config. This function should only be called once at application startup.</p>"},{"location":"reference/daemon/#guardian_daemon.policy","title":"policy","text":"<p>Policy loader for guardian-daemon. Loads and validates settings from a YAML configuration file.</p> <p>Classes:</p> <ul> <li> <code>Policy</code>           \u2013            </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy","title":"Policy","text":"<pre><code>Policy(\n    config_path: Optional[str] = None,\n    db_path: Optional[str] = None,\n)\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_user</code>             \u2013              <p>Adds a user to the policy with default settings.</p> </li> <li> <code>get_all_usernames</code>             \u2013              <p>Returns a list of all usernames in the policy.</p> </li> <li> <code>get_default</code>             \u2013              <p>Return a default value from the policy.</p> </li> <li> <code>get_grace_time</code>             \u2013              <p>Returns the grace time in minutes for a user.</p> </li> <li> <code>get_timezone</code>             \u2013              <p>Returns the configured timezone or the default timezone.</p> </li> <li> <code>get_user_policy</code>             \u2013              <p>Return the policy settings for a specific user.</p> </li> <li> <code>reload</code>             \u2013              <p>Reload the policy configuration and synchronize with the database.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy(config_path)","title":"<code>config_path</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to the YAML configuration file.</p>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy(db_path)","title":"<code>db_path</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to the SQLite database.</p>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.add_user","title":"add_user","text":"<pre><code>add_user(username: str) -&gt; bool\n</code></pre> <p>Adds a user to the policy with default settings.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the user was added, False otherwise</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.add_user(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username to add</p>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_all_usernames","title":"get_all_usernames","text":"<pre><code>get_all_usernames() -&gt; list\n</code></pre> <p>Returns a list of all usernames in the policy.</p> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>List of usernames</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_default","title":"get_default","text":"<pre><code>get_default(key: str) -&gt; Any\n</code></pre> <p>Return a default value from the policy.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>The default value or None</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_default(key)","title":"<code>key</code>","text":"(<code>str</code>)           \u2013            <p>Name of the default key</p>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_grace_time","title":"get_grace_time","text":"<pre><code>get_grace_time(username: str) -&gt; int\n</code></pre> <p>Returns the grace time in minutes for a user. This is the time allowed after quota is exhausted before terminating the session.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>Grace time in minutes (defaults to 5)</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_grace_time(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username to get grace time for</p>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_timezone","title":"get_timezone","text":"<pre><code>get_timezone() -&gt; str\n</code></pre> <p>Returns the configured timezone or the default timezone.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>Timezone string</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_user_policy","title":"get_user_policy","text":"<pre><code>get_user_policy(username: str) -&gt; Optional[Dict[str, Any]]\n</code></pre> <p>Return the policy settings for a specific user.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Optional[Dict[str, Any]]</code>           \u2013            <p>dict | None: The user's settings or None if not present.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.get_user_policy(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username</p>"},{"location":"reference/daemon/#guardian_daemon.policy.Policy.reload","title":"reload","text":"<pre><code>reload()\n</code></pre> <p>Reload the policy configuration and synchronize with the database.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions","title":"sessions","text":"<p>Session tracking for guardian-daemon. Monitors logins/logouts via systemd-logind (DBus), measures usage time and checks quota/curfew. Stores data in SQLite.</p> <p>Classes:</p> <ul> <li> <code>GuardianDaemonInterface</code>           \u2013            </li> <li> <code>SessionTracker</code>           \u2013            <p>Monitors and stores user sessions, checks quota and curfew.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.sessions.GuardianDaemonInterface","title":"GuardianDaemonInterface","text":"<pre><code>GuardianDaemonInterface(session_tracker)\n</code></pre> <p>               Bases: <code>ServiceInterface</code></p> <p>Methods:</p> <ul> <li> <code>LockEvent</code>             \u2013              <p>Receives lock/unlock events from agents and forwards to SessionTracker.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.sessions.GuardianDaemonInterface.LockEvent","title":"LockEvent  <code>async</code>","text":"<pre><code>LockEvent(\n    session_id: s, username: s, locked: b, timestamp: d\n)\n</code></pre> <p>Receives lock/unlock events from agents and forwards to SessionTracker.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker","title":"SessionTracker","text":"<pre><code>SessionTracker(\n    policy: Policy, config: dict, user_manager: UserManager\n)\n</code></pre> <p>Monitors and stores user sessions, checks quota and curfew. Connects to systemd-logind via DBus.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>check_daily_reset_on_startup</code>             \u2013              <p>Check if we need to perform a daily reset on daemon startup or system wake.</p> </li> <li> <code>check_quota</code>             \u2013              <p>Sum all sessions since the last reset and check against the daily quota.</p> </li> <li> <code>check_usage_summarize</code>             \u2013              <p>Check if we need to summarize usage and add to history.</p> </li> <li> <code>discover_agent_names_for_user</code>             \u2013              <p>Scans the D-Bus for all available agent service names for a given user</p> </li> <li> <code>get_active_users</code>             \u2013              <p>Return a list of currently active usernames.</p> </li> <li> <code>get_agent_names_for_user</code>             \u2013              <p>Return the cached list of D-Bus agent names for a user, or empty list if not found.</p> </li> <li> <code>get_agent_paths_for_user</code>             \u2013              <p>Returns a list of D-Bus object paths for agents belonging to the given user.</p> </li> <li> <code>get_remaining_time</code>             \u2013              <p>Returns the remaining allowed time for the given user today.</p> </li> <li> <code>get_total_time</code>             \u2013              <p>Returns the total allowed time (in minutes) for the given user today.</p> </li> <li> <code>get_user_sessions</code>             \u2013              <p>Returns a list of active session details for the given user.</p> </li> <li> <code>handle_login</code>             \u2013              <p>Register a new session on login for child accounts.</p> </li> <li> <code>handle_logout</code>             \u2013              <p>End a session on logout and save it in the database for child accounts.</p> </li> <li> <code>pause_user_time</code>             \u2013              <p>Pause time tracking for a user when a lock event is received for an unknown session.</p> </li> <li> <code>perform_daily_reset</code>             \u2013              <p>Perform daily reset: summarize sessions, create history entries,</p> </li> <li> <code>periodic_session_update</code>             \u2013              <p>Periodically update all active sessions in the database with current duration.</p> </li> <li> <code>receive_lock_event</code>             \u2013              <p>Called via D-Bus/IPC from agent to record lock/unlock events for a session.</p> </li> <li> <code>refresh_agent_name_mapping</code>             \u2013              <p>Refresh the mapping of usernames to their current D-Bus agent names using discover_agent_names_for_user().</p> </li> <li> <code>run</code>             \u2013              <p>Start session tracking, connect to systemd-logind via DBus, and listen for KDE lock events.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker(policy)","title":"<code>policy</code>","text":"(<code>Policy</code>)           \u2013            <p>Policy instance</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>Parsed configuration</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker(user_manager)","title":"<code>user_manager</code>","text":"(<code>UserManager</code>)           \u2013            <p>An instance of the user manager.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.check_daily_reset_on_startup","title":"check_daily_reset_on_startup  <code>async</code>","text":"<pre><code>check_daily_reset_on_startup()\n</code></pre> <p>Check if we need to perform a daily reset on daemon startup or system wake. This is based on the date comparison between today and the last reset date.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.check_quota","title":"check_quota  <code>async</code>","text":"<pre><code>check_quota(username: str) -&gt; bool\n</code></pre> <p>Sum all sessions since the last reset and check against the daily quota. Returns True if time remains, otherwise False.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if time remains, False if limit reached</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.check_quota(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.check_usage_summarize","title":"check_usage_summarize  <code>async</code>","text":"<pre><code>check_usage_summarize(\n    username, used_time, quota_reached=False\n)\n</code></pre> <p>Check if we need to summarize usage and add to history. This should be called when: 1. The user reaches their daily quota 2. The user logs out and it's their last session of the day</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.check_usage_summarize(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username to check</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.check_usage_summarize(used_time)","title":"<code>used_time</code>","text":"(<code>float</code>)           \u2013            <p>Used time in seconds</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.check_usage_summarize(quota_reached)","title":"<code>quota_reached</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the quota was reached</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.discover_agent_names_for_user","title":"discover_agent_names_for_user  <code>async</code>","text":"<pre><code>discover_agent_names_for_user(username: str)\n</code></pre> <p>Scans the D-Bus for all available agent service names for a given user and updates the internal map.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.get_active_users","title":"get_active_users  <code>async</code>","text":"<pre><code>get_active_users() -&gt; list\n</code></pre> <p>Return a list of currently active usernames.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.get_agent_names_for_user","title":"get_agent_names_for_user","text":"<pre><code>get_agent_names_for_user(username: str) -&gt; list\n</code></pre> <p>Return the cached list of D-Bus agent names for a user, or empty list if not found. Converts from set to list if necessary.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.get_agent_paths_for_user","title":"get_agent_paths_for_user","text":"<pre><code>get_agent_paths_for_user(username: str)\n</code></pre> <p>Returns a list of D-Bus object paths for agents belonging to the given user. This should be tracked in active_sessions as 'agent_path' if available, otherwise default to /org/guardian/Agent or numbered agents.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.get_remaining_time","title":"get_remaining_time  <code>async</code>","text":"<pre><code>get_remaining_time(username: str) -&gt; float\n</code></pre> <p>Returns the remaining allowed time for the given user today. All calculations use minutes as the base unit to match the API contract.</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Remaining screen time in minutes</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.get_total_time","title":"get_total_time  <code>async</code>","text":"<pre><code>get_total_time(username: str) -&gt; float\n</code></pre> <p>Returns the total allowed time (in minutes) for the given user today.</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Total allowed screen time in minutes</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.get_user_sessions","title":"get_user_sessions","text":"<pre><code>get_user_sessions(username: str)\n</code></pre> <p>Returns a list of active session details for the given user. Each item is a dict with session_id, service, desktop, start_time, etc.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.handle_login","title":"handle_login  <code>async</code>","text":"<pre><code>handle_login(session_id, uid, username, props)\n</code></pre> <p>Register a new session on login for child accounts. Skips systemd-user sessions. Also ensure user account is set up: PAM time rules, systemd user service, and agent.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.handle_login(session_id)","title":"<code>session_id</code>","text":"(<code>str</code>)           \u2013            <p>Session ID</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.handle_login(uid)","title":"<code>uid</code>","text":"(<code>int</code>)           \u2013            <p>User ID</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.handle_login(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.handle_logout","title":"handle_logout  <code>async</code>","text":"<pre><code>handle_logout(session_id)\n</code></pre> <p>End a session on logout and save it in the database for child accounts.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.handle_logout(session_id)","title":"<code>session_id</code>","text":"(<code>str</code>)           \u2013            <p>Session ID</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.pause_user_time","title":"pause_user_time","text":"<pre><code>pause_user_time(username, timestamp)\n</code></pre> <p>Pause time tracking for a user when a lock event is received for an unknown session.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.perform_daily_reset","title":"perform_daily_reset  <code>async</code>","text":"<pre><code>perform_daily_reset(force=False)\n</code></pre> <p>Perform daily reset: summarize sessions, create history entries, clean up sessions table, and reset quotas.</p> <p>This should be called when: 1. The system is first booted/unlocked for the day 2. The daily quota is reached 3. The configured reset_time is reached</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.periodic_session_update","title":"periodic_session_update  <code>async</code>","text":"<pre><code>periodic_session_update(interval: int = 60)\n</code></pre> <p>Periodically update all active sessions in the database with current duration. This is critical for preserving session time across daemon restarts.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.receive_lock_event","title":"receive_lock_event  <code>async</code>","text":"<pre><code>receive_lock_event(\n    session_id: str,\n    username: str,\n    locked: bool,\n    timestamp: float,\n)\n</code></pre> <p>Called via D-Bus/IPC from agent to record lock/unlock events for a session. Also updates session progress in the database.</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.refresh_agent_name_mapping","title":"refresh_agent_name_mapping  <code>async</code>","text":"<pre><code>refresh_agent_name_mapping()\n</code></pre> <p>Refresh the mapping of usernames to their current D-Bus agent names using discover_agent_names_for_user(). Stores the mapping in self.agent_name_map: {username: {dbus_name, ...}}</p>"},{"location":"reference/daemon/#guardian_daemon.sessions.SessionTracker.run","title":"run  <code>async</code>","text":"<pre><code>run()\n</code></pre> <p>Start session tracking, connect to systemd-logind via DBus, and listen for KDE lock events. Also checks for already logged-in child sessions on startup. Periodically updates session progress in the database.</p>"},{"location":"reference/daemon/#guardian_daemon.storage","title":"storage","text":"<p>Central SQLite interface for guardian-daemon. Provides functions for session handling and future extensions.</p> <p>Classes:</p> <ul> <li> <code>Storage</code>           \u2013            <p>Central SQLite interface for session and settings storage in Guardian Daemon.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage","title":"Storage","text":"<pre><code>Storage(db_path: str)\n</code></pre> <p>Central SQLite interface for session and settings storage in Guardian Daemon.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_session</code>             \u2013              <p>Adds a new session to the database.</p> </li> <li> <code>clean_old_sessions</code>             \u2013              <p>Remove old session records for a user after they've been summarized to history.</p> </li> <li> <code>close</code>             \u2013              <p>Close the database connection.</p> </li> <li> <code>delete_sessions_since</code>             \u2013              <p>Delete all sessions from the database since the given timestamp.</p> </li> <li> <code>get_all_usernames</code>             \u2013              <p>Return all usernames (except 'default') from the database.</p> </li> <li> <code>get_history</code>             \u2013              <p>Retrieve history entries for a user within a date range.</p> </li> <li> <code>get_last_reset_date</code>             \u2013              <p>Retrieve the last daily reset date from the database.</p> </li> <li> <code>get_last_reset_timestamp</code>             \u2013              <p>Retrieve the last daily reset timestamp from the database.</p> </li> <li> <code>get_sessions_for_user</code>             \u2013              <p>Retrieve all sessions for a user, optionally since a specific time.</p> </li> <li> <code>get_user_settings</code>             \u2013              <p>Retrieve user settings from the database for the given username.</p> </li> <li> <code>logind_to_epoch</code>             \u2013              <p>Convert logind timestamp (microseconds since boot) to EPOCH timestamp.</p> </li> <li> <code>save_history_entry</code>             \u2013              <p>Save a history entry from a session summary.</p> </li> <li> <code>set_last_reset_date</code>             \u2013              <p>Store the last daily reset date in the database.</p> </li> <li> <code>set_last_reset_timestamp</code>             \u2013              <p>Store the last daily reset timestamp in the database.</p> </li> <li> <code>set_user_settings</code>             \u2013              <p>Store user settings in the database for the given username.</p> </li> <li> <code>summarize_user_sessions</code>             \u2013              <p>Summarize all sessions for a user on a given date and create a history entry.</p> </li> <li> <code>sync_config_to_db</code>             \u2013              <p>Synchronize configuration data to the database.</p> </li> <li> <code>update_session_logout</code>             \u2013              <p>Update session entry with logout time and duration.</p> </li> <li> <code>update_session_progress</code>             \u2013              <p>Periodically update session entry with current duration (while session is active).</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage(db_path)","title":"<code>db_path</code>","text":"(<code>str</code>)           \u2013            <p>Pfad zur SQLite-Datenbank.</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session","title":"add_session","text":"<pre><code>add_session(\n    session_id: str,\n    username: str,\n    uid: int,\n    start_time: float,\n    end_time: float,\n    duration_seconds: float,\n    desktop: Optional[str] = None,\n    service: Optional[str] = None,\n)\n</code></pre> <p>Adds a new session to the database.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(session_id)","title":"<code>session_id</code>","text":"(<code>str</code>)           \u2013            <p>Session ID</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(uid)","title":"<code>uid</code>","text":"(<code>int</code>)           \u2013            <p>User ID</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(start_time)","title":"<code>start_time</code>","text":"(<code>float</code>)           \u2013            <p>Start time (EPOCH)</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(end_time)","title":"<code>end_time</code>","text":"(<code>float</code>)           \u2013            <p>End time (EPOCH)</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(duration_seconds)","title":"<code>duration_seconds</code>","text":"(<code>float</code>)           \u2013            <p>Session duration in seconds</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(desktop)","title":"<code>desktop</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Desktop environment</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.add_session(service)","title":"<code>service</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Service (e.g. sddm)</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.clean_old_sessions","title":"clean_old_sessions","text":"<pre><code>clean_old_sessions(username: str, before_date: str = None)\n</code></pre> <p>Remove old session records for a user after they've been summarized to history.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.clean_old_sessions(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username to clean sessions for</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.clean_old_sessions(before_date)","title":"<code>before_date</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Remove sessions before this date (YYYY-MM-DD)                          If not provided, removes all sessions</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the database connection.</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.delete_sessions_since","title":"delete_sessions_since","text":"<pre><code>delete_sessions_since(since: float)\n</code></pre> <p>Delete all sessions from the database since the given timestamp.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.delete_sessions_since(since)","title":"<code>since</code>","text":"(<code>float</code>)           \u2013            <p>Startzeitpunkt (Unix-Timestamp)</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_all_usernames","title":"get_all_usernames","text":"<pre><code>get_all_usernames() -&gt; list\n</code></pre> <p>Return all usernames (except 'default') from the database.</p> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>List of usernames</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_history","title":"get_history","text":"<pre><code>get_history(\n    username: str,\n    start_date: str = None,\n    end_date: str = None,\n)\n</code></pre> <p>Retrieve history entries for a user within a date range.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list</code>          \u2013            <p>List of history entries</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_history(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username to get history for</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_history(start_date)","title":"<code>start_date</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Start date in YYYY-MM-DD format</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_history(end_date)","title":"<code>end_date</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>End date in YYYY-MM-DD format</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_last_reset_date","title":"get_last_reset_date","text":"<pre><code>get_last_reset_date() -&gt; str\n</code></pre> <p>Retrieve the last daily reset date from the database. Returns:     str: Date in YYYY-MM-DD format</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_last_reset_timestamp","title":"get_last_reset_timestamp","text":"<pre><code>get_last_reset_timestamp() -&gt; Optional[float]\n</code></pre> <p>Retrieve the last daily reset timestamp from the database. Returns:     float | None: EPOCH timestamp of last reset or None</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_sessions_for_user","title":"get_sessions_for_user","text":"<pre><code>get_sessions_for_user(\n    username: str, since: Optional[float] = None\n) -&gt; list\n</code></pre> <p>Retrieve all sessions for a user, optionally since a specific time.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>List of sessions</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_sessions_for_user(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_sessions_for_user(since)","title":"<code>since</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Start time (Unix timestamp)</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_user_settings","title":"get_user_settings","text":"<pre><code>get_user_settings(username: str) -&gt; Optional[dict]\n</code></pre> <p>Retrieve user settings from the database for the given username.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Optional[dict]</code>           \u2013            <p>dict | None: Einstellungen des Nutzers oder None</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.get_user_settings(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Nutzername</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.logind_to_epoch","title":"logind_to_epoch  <code>staticmethod</code>","text":"<pre><code>logind_to_epoch(logind_timestamp: int) -&gt; float\n</code></pre> <p>Convert logind timestamp (microseconds since boot) to EPOCH timestamp.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>EPOCH timestamp</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.logind_to_epoch(logind_timestamp)","title":"<code>logind_timestamp</code>","text":"(<code>int</code>)           \u2013            <p>Microseconds since boot</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.save_history_entry","title":"save_history_entry","text":"<pre><code>save_history_entry(summary: dict)\n</code></pre> <p>Save a history entry from a session summary.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.save_history_entry(summary)","title":"<code>summary</code>","text":"(<code>dict</code>)           \u2013            <p>Session summary data</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.set_last_reset_date","title":"set_last_reset_date","text":"<pre><code>set_last_reset_date(date_str: str)\n</code></pre> <p>Store the last daily reset date in the database. Args:     date_str (str): Date in YYYY-MM-DD format</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.set_last_reset_timestamp","title":"set_last_reset_timestamp","text":"<pre><code>set_last_reset_timestamp(ts: float)\n</code></pre> <p>Store the last daily reset timestamp in the database. Args:     ts (float): EPOCH timestamp</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.set_user_settings","title":"set_user_settings","text":"<pre><code>set_user_settings(username: str, settings: dict)\n</code></pre> <p>Store user settings in the database for the given username.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.set_user_settings(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Nutzername</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.set_user_settings(settings)","title":"<code>settings</code>","text":"(<code>dict</code>)           \u2013            <p>Einstellungen</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.summarize_user_sessions","title":"summarize_user_sessions","text":"<pre><code>summarize_user_sessions(username: str, date: str = None)\n</code></pre> <p>Summarize all sessions for a user on a given date and create a history entry. If date is not provided, summarize sessions from the most recent day.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict</code>          \u2013            <p>Summary of session data</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.summarize_user_sessions(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username to summarize sessions for</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.summarize_user_sessions(date)","title":"<code>date</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Date in YYYY-MM-DD format, defaults to today</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.sync_config_to_db","title":"sync_config_to_db","text":"<pre><code>sync_config_to_db(config: dict)\n</code></pre> <p>Synchronize configuration data to the database.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.sync_config_to_db(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>Konfigurationsdaten</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.update_session_logout","title":"update_session_logout","text":"<pre><code>update_session_logout(\n    session_id: str,\n    end_time: float,\n    duration_seconds: float,\n)\n</code></pre> <p>Update session entry with logout time and duration.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.update_session_logout(session_id)","title":"<code>session_id</code>","text":"(<code>str</code>)           \u2013            <p>Session ID to update</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.update_session_logout(end_time)","title":"<code>end_time</code>","text":"(<code>float</code>)           \u2013            <p>End time in EPOCH seconds</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.update_session_logout(duration_seconds)","title":"<code>duration_seconds</code>","text":"(<code>float</code>)           \u2013            <p>Session duration in seconds</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.update_session_progress","title":"update_session_progress","text":"<pre><code>update_session_progress(\n    session_id: str, duration_seconds: float\n)\n</code></pre> <p>Periodically update session entry with current duration (while session is active). This is critical for preserving session time across daemon restarts.</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.update_session_progress(session_id)","title":"<code>session_id</code>","text":"(<code>str</code>)           \u2013            <p>The session ID to update</p>"},{"location":"reference/daemon/#guardian_daemon.storage.Storage.update_session_progress(duration_seconds)","title":"<code>duration_seconds</code>","text":"(<code>float</code>)           \u2013            <p>Duration in seconds</p>"},{"location":"reference/daemon/#guardian_daemon.systemd_manager","title":"systemd_manager","text":"<p>Systemd manager for guardian-daemon. Creates and manages systemd timers/units for daily reset and curfew.</p> <p>Classes:</p> <ul> <li> <code>SystemdManager</code>           \u2013            <p>Manages systemd timers and units for daily reset and curfew enforcement.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.systemd_manager.SystemdManager","title":"SystemdManager","text":"<pre><code>SystemdManager()\n</code></pre> <p>Manages systemd timers and units for daily reset and curfew enforcement.</p> <p>Methods:</p> <ul> <li> <code>create_curfew_timer</code>             \u2013              <p>Create a systemd timer and service unit for curfew enforcement.</p> </li> <li> <code>create_daily_reset_timer</code>             \u2013              <p>Create a systemd timer and corresponding service unit for the daily quota reset.</p> </li> <li> <code>reload_systemd</code>             \u2013              <p>Reload systemd units to apply changes.</p> </li> <li> <code>remove_timer_and_service</code>             \u2013              <p>Remove a systemd timer and service unit by name.</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.systemd_manager.SystemdManager.create_curfew_timer","title":"create_curfew_timer","text":"<pre><code>create_curfew_timer(start_time='22:00', end_time='06:00')\n</code></pre> <p>Create a systemd timer and service unit for curfew enforcement.</p>"},{"location":"reference/daemon/#guardian_daemon.systemd_manager.SystemdManager.create_daily_reset_timer","title":"create_daily_reset_timer","text":"<pre><code>create_daily_reset_timer(reset_time='03:00')\n</code></pre> <p>Create a systemd timer and corresponding service unit for the daily quota reset.</p>"},{"location":"reference/daemon/#guardian_daemon.systemd_manager.SystemdManager.reload_systemd","title":"reload_systemd  <code>async</code>","text":"<pre><code>reload_systemd()\n</code></pre> <p>Reload systemd units to apply changes.</p>"},{"location":"reference/daemon/#guardian_daemon.systemd_manager.SystemdManager.remove_timer_and_service","title":"remove_timer_and_service","text":"<pre><code>remove_timer_and_service(timer_name)\n</code></pre> <p>Remove a systemd timer and service unit by name.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager","title":"user_manager","text":"<p>User manager for guardian-daemon. Manages login time windows for children via /etc/security/time.conf and handles user-specific systemd services.</p> <p>Classes:</p> <ul> <li> <code>UserManager</code>           \u2013            </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager","title":"UserManager","text":"<pre><code>UserManager(policy: Policy)\n</code></pre> <p>Methods:</p> <ul> <li> <code>ensure_kids_group</code>             \u2013              <p>Ensure the 'kids' group exists and all managed users are members of it.</p> </li> <li> <code>ensure_pam_time_module</code>             \u2013              <p>Ensures pam_time.so is active using two complementary approaches:</p> </li> <li> <code>ensure_systemd_user_service</code>             \u2013              <p>Ensure that systemd user services are set up for the given user without enabling lingering.</p> </li> <li> <code>remove_time_rules</code>             \u2013              <p>Remove time rules set by guardian-daemon from /etc/security/time.conf.</p> </li> <li> <code>setup_dbus_policy</code>             \u2013              <p>Creates /etc/dbus-1/system.d/guardian.conf to allow managed users access to org.guardian.Daemon.</p> </li> <li> <code>setup_user_login</code>             \u2013              <p>Performs all required setup steps for a user at login.</p> </li> <li> <code>setup_user_service</code>             \u2013              <p>Sets up the guardian_agent.service for the given user's systemd.</p> </li> <li> <code>user_exists</code>             \u2013              <p>Check if a user exists on the system.</p> </li> <li> <code>write_time_rules</code>             \u2013              <p>Updates the time rules for all children according to the policy in /etc/security/time.conf,</p> </li> </ul>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.ensure_kids_group","title":"ensure_kids_group","text":"<pre><code>ensure_kids_group()\n</code></pre> <p>Ensure the 'kids' group exists and all managed users are members of it. Also ensures all managed users are in the 'users' group to access agent files.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.ensure_pam_time_module","title":"ensure_pam_time_module","text":"<pre><code>ensure_pam_time_module()\n</code></pre> <p>Ensures pam_time.so is active using two complementary approaches:</p> <ol> <li> <p>Creates a custom authselect profile with pam_time.so in the system-auth    stack (applies to all PAM services that include system-auth)</p> </li> <li> <p>Directly modifies /etc/pam.d/sddm to explicitly include pam_time.so    before the system-account include (ensuring SDDM enforces time restrictions    even if authselect updates the system files)</p> </li> </ol> <p>This dual approach ensures maximum compatibility and resilience against system updates or configuration changes.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.ensure_systemd_user_service","title":"ensure_systemd_user_service","text":"<pre><code>ensure_systemd_user_service(username)\n</code></pre> <p>Ensure that systemd user services are set up for the given user without enabling lingering. Only starts the service if the user is actively logged in with a session.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.remove_time_rules","title":"remove_time_rules","text":"<pre><code>remove_time_rules()\n</code></pre> <p>Remove time rules set by guardian-daemon from /etc/security/time.conf.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.setup_dbus_policy","title":"setup_dbus_policy","text":"<pre><code>setup_dbus_policy()\n</code></pre> <p>Creates /etc/dbus-1/system.d/guardian.conf to allow managed users access to org.guardian.Daemon. Both 'kids' and 'users' groups are given permissions to support transition periods.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.setup_user_login","title":"setup_user_login","text":"<pre><code>setup_user_login(username: str)\n</code></pre> <p>Performs all required setup steps for a user at login. This is the main entry point from SessionTracker when a user logs in.</p> <p>This method: 1. Updates PAM time rules 2. Ensures user is in required groups (kids and users) 3. Sets up and activates the user's systemd service</p> <p>Parameters:</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.setup_user_login(username)","title":"<code>username</code>","text":"(<code>str</code>)           \u2013            <p>Username of the user logging in</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.setup_user_service","title":"setup_user_service","text":"<pre><code>setup_user_service(username: str)\n</code></pre> <p>Sets up the guardian_agent.service for the given user's systemd. Updates the service file if its checksum has changed. Ensures correct directory structure and permissions.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.user_exists","title":"user_exists","text":"<pre><code>user_exists(username)\n</code></pre> <p>Check if a user exists on the system. Returns True if user exists, False otherwise.</p>"},{"location":"reference/daemon/#guardian_daemon.user_manager.UserManager.write_time_rules","title":"write_time_rules","text":"<pre><code>write_time_rules()\n</code></pre> <p>Updates the time rules for all children according to the policy in /etc/security/time.conf, without overwriting foreign rules.</p> <p>This method: 1. First checks if the file is excessively large and needs cleanup 2. Compares existing content with what we need to write 3. Only writes if content needs updating</p>"},{"location":"reference/hub/","title":"Guardian Hub","text":""},{"location":"reference/hub/#guardian_hub","title":"guardian_hub","text":"<p>Modules:</p> <ul> <li> <code>api</code>           \u2013            <p>API-Endpunkte f\u00fcr guardian-hub (FastAPI).</p> </li> <li> <code>db</code>           \u2013            <p>Datenbankverbindung und Logik f\u00fcr guardian-hub.</p> </li> <li> <code>main</code>           \u2013            </li> <li> <code>models</code>           \u2013            <p>Datenbankmodelle f\u00fcr guardian-hub.</p> </li> </ul>"},{"location":"reference/hub/#guardian_hub.api","title":"api","text":"<p>API-Endpunkte f\u00fcr guardian-hub (FastAPI).</p>"},{"location":"reference/hub/#guardian_hub.db","title":"db","text":"<p>Datenbankverbindung und Logik f\u00fcr guardian-hub.</p>"},{"location":"reference/hub/#guardian_hub.main","title":"main","text":"<p>Functions:</p> <ul> <li> <code>main</code>             \u2013              <p>Entry point for guardian-hub.</p> </li> </ul>"},{"location":"reference/hub/#guardian_hub.main.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Entry point for guardian-hub. Starts the central server for policy management and monitoring.</p>"},{"location":"reference/hub/#guardian_hub.models","title":"models","text":"<p>Datenbankmodelle f\u00fcr guardian-hub.</p>"}]}